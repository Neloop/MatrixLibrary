<?xml version="1.0" encoding="utf-8"?>
<topic id="f2e22559-2d77-4f75-8efc-442091effad0" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
        Toto je asi nejlépe doporučitelný způsob integrování MatrixLibrary knihovny do určitého projektu.
        Předpokládá se stažení celého projektu formou gitovského repozitáře ze služby Bitbucket, které je popsané v <link xlink:href="800a1c4c-a8fb-411b-a956-b367f741b596"/>.
        Tímto vzniká výchozí složka knihovny <localUri>./matrixlibrary/</localUri> se kterou se později pracuje.
      </para>
      <para>
        Připojení DLL knihovny je založené na tom, že se k aktuálnímu projektu přidá další podprojekt obsahující MatrixLibrary knihovnu.
        Tento podprojekt je překládán jako knihovna a výsledkem překladu je DLL soubor/assembly, která není spustitelná a obsahuje CIL kód.
        Takto vytvořená knihovna se pak automaticky připojuje formou právě DLL souboru k jednotlivým spustitelným podprojektům, pokud je v nich využívána.
        Výstupní spustitelné soubory jsou tedy závislé na externí knihovně, která s nimi musí být distribuována.
      </para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Postup integrace</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              <legacyBold>Přidání existujícího podprojektu do aktuálního projektu.</legacyBold>
            </para>
            <para>
              Abychom mohli knihovnu vůbec používat musíme ji přidat do daného projektu ve Visual Studiu.
              To nám zajistí to, že se knihovna přeloží do DLL souboru, který budeme moci "přilinkovat" tam kde se bude používat.
            </para>
            <para>
              Samotné přidání provedeme nejprve zkopírováním složky <localUri>./matrixlibrary/MatrixLibrary</localUri>, kde jsou umístěny zdrojové kódy knihovny MatrixLibrary, do výsledného projektového adresáře.
            </para>
            <para>
              Tímto jsme ale nepřidali podprojekt do výsledné solution, to provedeme kliknutím pravým tlačítkem na celkové solution, vybráním položky Add a poté Existing project, kde nalezneme odpovídající *.csproj soubor umístěný v <localUri>./matrixlibrary/MatrixLibrary/MatrixLibrary.csproj</localUri>.
              To nám zajistí přidání knihovny MatrixLibrary do aktuální solution, což vyústí v to, že se MatrixLibrary bude překládat při překladu celé solution.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <legacyBold>Přidání reference na knihovnu do podprojektů ve kterých ji chceme využít.</legacyBold>
            </para>
            <para>
              V tuto chvíli máme přidán podprojekt do celé výsledné solution, to ale neznamená, že to celé začně fungovat.
              Je třeba ještě do podprojektů, ve kterých chceme využívat MatrixLibrary, přidat referenci na ní.
            </para>
            <para>
              To se provede vyvoláním kontextové nabídky na daném podprojektu, vybráním položky Add a poté Reference.
              V dialogovém okně, které se pak otevře je třeba vybrat položku Solution a Projects.
              Pak už by knihovna MatrixLibrary měla být vidět a měla by jít zaškrtnout.
            </para>
            <para>
              Zaškrtnutím a potvrzením se do daného podprojektu přidá reference na MatrixLibrary, což znamená, že zde tuto knihovnu bude možné využít.
              Do podprojektu (respektive výsledné assembly) se tímto přidá externí závislost na DLL soubor, který musí být vždy při spuštění dostupný, ideálně ve spouštěné složce.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <legacyBold>Překlad.</legacyBold>
            </para>
            <para>
              Překladu už v tuto chvíli nic nebrání a celý projekt by měl jít úspěšně přeložit.
              Podprojekt MatrixLibrary je v tomto případě přeložen do DLL knihovny.
              Na této knihovně závislé podprojekty jsou pak s ní provázány a budou ve svých výstupních složkách obsahovat její kopii.
              Ta musí být vždy s takovým podprojektem distribuována, protože bez ní by došlo k běhové chybě.
            </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <para>
      Podobný způsob lze využít i v případě, že máme dostupnou knihovnu v podobě DLL souboru.
      V tom případě se nemusí do projektu přidávat žádné nové soubory, stačí jenom přidat referenci do daného podprojektu a můžeme knihovnu používat.
    </para>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
