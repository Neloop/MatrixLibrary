<?xml version="1.0" encoding="utf-8"?>
<topic id="ecadd62f-441f-4413-b8a4-f697af240892" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
        Hardest way of integration MatrixLibrary into application is through Reflection and dynamic loading of library at runtime.
        This means that library is not integrated into current project and all work with linking has to be executed at runtime.
      </para>
      <para>
        This way is not recommended because of missing type checks.
        Especially using of keyword dynamic is problematic and thus calling of any method or property can cause throwing exceptions.
        In general this method is slow and should be used only in special cases, like dynamically loaded plugins or so.
      </para>
      <para>
        Kind of disadvantage in this case is that extension methods cannot be used directly on Matrix object.
      </para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Two ways of dynamic loading</title>
      <steps class="ordered">
        <step>
          <content>
            <para>
              <legacyBold>Usage without keyword dynamic</legacyBold>
            </para>
            <code>
              int[,] input = new int[3, 3] { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };

              var matrixLib = System.Reflection.Assembly.LoadFile(ABSOLUTE_PATH_TO_MATRIXLIBRARY.DLL);

              var matrixString = String.Format("{0}`1[[{1}]]", "MatrixLibrary.Matrix", "MatrixLibrary.MatrixNumber");
              var matrixType = matrixLib.GetType(matrixString, true);
              var matrixNumberType = matrixLib.GetType("MatrixLibrary.MatrixNumber", true);

              var matrixInstance = Activator.CreateInstance(matrixType, new object[] { input });

              foreach (var item in matrixType.GetMethods())
              {
                  Console.WriteLine(item.Name);
              }

              var matrixMethod = matrixType.GetMethod("ToString");
              Console.WriteLine();
              Console.WriteLine(matrixMethod.Invoke(matrixInstance, new object[] { }));
              Console.WriteLine();

              foreach (var item in matrixLib.GetTypes())
              {
                  Console.WriteLine(item.Name);
              }
            </code>
            <para>
              Example above represents loading of library into application using Reflection.
              Function Assembly.LoadFile is static method which loads DLL file/assembly from given absolute value and return its handler.
              Gained handler can be used to load particular types saved in assembly.
              Construction of types is done with static Activator.CreateInstance function, which will construct object with given parameters.
            </para>
            <para>
              Calling of methods on created instance is not straightforward, method has to be at first loaded with GetMethod on given type.
              After that method can be executed with Invoke function which needs object on which will be called and of course function parameters.
            </para>
            <para>
              All methods on instance can be go through with GetMethods function which will return array of available methods.
              All types in particular assembly is iterable with GetTypes run on assebmly's handler.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <legacyBold>Usage with keyword dynamic</legacyBold>
            </para>
            <code>
              int[,] input = new int[3, 3] { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };

              var matrixLib = System.Reflection.Assembly.LoadFile(ABSOLUTE_PATH_TO_MATRIXLIBRARY.DLL);

              var matrixString = String.Format("{0}`1[[{1}]]", "MatrixLibrary.Matrix", "MatrixLibrary.MatrixNumber");
              var matrixType = matrixLib.GetType(matrixString, true);
              var matrixNumberType = matrixLib.GetType("MatrixLibrary.MatrixNumber", true);

              dynamic matrixInstance = Activator.CreateInstance(matrixType, new object[] { input });

              Console.WriteLine(matrixInstance.ToString());

              var matrixTypeExt = matrixLib.GetType("MatrixLibrary.ClassicOperations");
              var matrixMethodExt = matrixTypeExt.GetMethod("Addition");
              matrixMethodExt = matrixMethodExt.MakeGenericMethod(new Type[] { matrixNumberType });
              var result = matrixMethodExt.Invoke(null, new object[] { matrixInstance, matrixInstance });

              Console.WriteLine(result);
            </code>
            <para>
              Code above represents loading library with Reflection and keyword dynamic.
              Assembly is again loaded with Assembly.LoadFile method which will return handler.
              Like in previous way, type has to be loaded with GetType function on handler.
              After that instance is also created in same way with Activator.CreateInstance, but its result is given into dynamic variable.
            </para>
            <para>
              Dynamic variables is new functionality of Visual C# 2015 and generally its variable on which everything is allowed.
              That means, any method can be called on it event if assigned type does not have it and compiler will allow it.
              But if given type method or property really not define, than runtime error will be caused.
            </para>
            <para>
              From previous paragraph appear that usage of dynamic variable is very simple, everything needed is to call methods with right names.
              Of course this is point where type checks are missing and typing error are not detected by compiler.
              Like in previous example even in this case extension methods cannot be used.
            </para>
            <para>
              Calling of methods which works on matrixes is then very similar as calling them on Matrix object.
              Firtstly static class which contains their definitions has to be loaded and then these methods have to be loaded with GetMethod function.
              Because all methods are generic, there is needed to call MakeGenericMethod function.
              At the end methods can be called with Invoke function, like described in previous example.
            </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <para></para>
    <para>
      Matrix class name construction comes from
      <externalLink>
        <linkText>Loading Generic Types with Assembly.LoadFrom</linkText>
        <linkAlternateText>Loading Generic Types with Assembly.LoadFrom</linkAlternateText>
        <linkUri>http://www.jonegerton.com/dotnet/loading-generic-types-with-assembly-loadfrom/</linkUri>
      </externalLink>.
      <code>String.Format("{0}`1[[{1}]]", "MatrixLibrary.Matrix", "MatrixLibrary.MatrixNumber");</code>
    </para>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
