<?xml version="1.0" encoding="utf-8"?>
<topic id="289856a3-70ab-48bb-a85e-7e4778f43809" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>
        The easiest way to integrate MatrixLibrary is simply copying library source codes into existing project.
        How to get MatrixLibrary and its source codes is written here: <link xlink:href="800a1c4c-a8fb-411b-a956-b367f741b596"/>.
      </para>
      <para>
        Integration of source codes into existing project is based on simply adding MatrixLibrary source codes into project as any other newly created file.
        Thanks to that matrixes and its method will be always available in the program and there will be no need to join another *.dll file.
        In result project will not be dependent on external library.
      </para>
    </introduction>

    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <procedure>
      <title>Integration procedure</title>
      <steps class="ordered">
        <step>
          <content>
            <para><legacyBold>Find source codes of MatrixLibrary.</legacyBold></para>
            <para>
              Source codes are located at <localUri>./MatrixLibrary</localUri> folder, there are files with needed structures and also files with particular operations.
              Most importantly there are these files which should be included in your project:
            </para>
            <list class="bullet">
              <listItem>Matrix.cs</listItem>
              <listItem>MatrixNumber.cs</listItem>
              <listItem>AlteringOperations.cs</listItem>
              <listItem>Computations.cs</listItem>
              <listItem>Decompositions.cs</listItem>
              <listItem>Characteristics.cs</listItem>
              <listItem>ClassicOperations.cs</listItem>
              <listItem>Properties.cs</listItem>
            </list>
          </content>
        </step>
        <step>
          <content>
            <para><legacyBold>Add files into Visual Studio project.</legacyBold></para>
            <para>
              In this case of integration best practise is to separate source files of MatrixLibrary (aka. give project some structure).
              Maybe the best solution will be clone whole git repository into your project and keep its internal structure.
              If your project is also maintained with git versioning system, just use git submodules to keep MatrixLibrary in your project.
            </para>
          </content>
        </step>
        <step>
          <content>
            <para>
              <legacyBold>Compilation.</legacyBold>
            </para>
            <para>
              There is no need for further modification in project.
              All should be set and ready for compilation.
            </para>
          </content>
        </step>
      </steps>
      <!-- <conclusion>Optional conclusion</conclusion> -->
    </procedure>

    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

    <!-- <security>Optional discussion of security issues.</security> -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
