<?xml version="1.0" encoding="utf-8"?>
<topic id="a53e4021-2b11-44ea-b88d-6fe7f7de3452" revisionNumber="1">
  <developerSampleDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Following page describes how you can use MatrixLibrary in your project.
        For instructions of how to integrate library into project please visit <link xlink:href="6758de23-d252-426c-b7b2-cbc946a578ae"/> page.
      </para>
      <para>
        These examples are related to only two of the three possible integration options.
        Usage on dynamic load of library at runtime is a bit complicated and is mildly described here: <link xlink:href="ecadd62f-441f-4413-b8a4-f697af240892"/>.
      </para>
    </introduction>

    <!-- <procedure>Optional procedures.  See How To document for procedure layout example.</procedure> -->
    <!-- <requirements>Optional requirements section</requirements> -->
    <!-- <demonstrates>Optional info about what is demonstrated</demonstrates> -->
    <!-- <codeExample>Optional code example</codeExample> -->

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Interface IMatrixNumber</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Work with IMatrixNumber interface is shown with its MatrixNumber implementation:
        </para>
        <code>
          IMatrixNumber numberA = new MatrixNumber(5); // create new instance of MatrixNumber
          IMatrixNumber numberB = new MatrixNumber((MatrixNumber)numberA);
              // create object of type MatrixNumber which is copy of numberA


          numberA.AddInt(5); // add integer 5 to numberA
          Console.WriteLine(numberA.__ToString()); // result: 10


          numberB.AddDouble(5.99); // add double 5.99 to numberB
          Console.WriteLine(numberB.__ToString()); // result: 10.99


          numberA = numberB.Copy(); // assign numberB copy into numberA
          numberB.AddInt(1);
          Console.WriteLine(numberA.__ToString()); // result: 10.99
          Console.WriteLine(numberB.__ToString()); // result: 11.99


          numberA.CopyFrom(numberB); // into numberA copy internal data of numberB
          numberB.AddInt(1);
          Console.WriteLine(numberA.__ToString()); // result: 11.99
          Console.WriteLine(numberB.__ToString()); // result: 12.99


          if(!numberA.IsZero() &amp;&amp; !numberA.IsOne()) // test if numberA is not a zero or not a one
          {
              Console.WriteLine(numberA.__ToString());
                  // convert numberA into string form and print it on stdout
          }


          /* Following methods do not modify caller */
          numberA = numberA.__Addition(numberB); // add two numbers
          numberA = numberA.__Subtraction(numberB); // subtract numbers
          numberA = numberA.__Multiplication(numberB); // multiply numbers
          numberA = numberA.__Division(numberB);

          Console.WriteLine(numberA.__ToString()); // result: 11.99
          Console.WriteLine(numberB.__ToString()); // result: 12.99

          numberA = numberA.__Exponentiate(4); // exponentiate numberA
          numberA = numberA.__SquareRoot();
          numberA = numberA.__Negate(); // invert numberA (basically do *-1)

          Console.WriteLine(numberA.__ToString()); // result: -143,7601

          if (numberA.__IsEqual(numberB)) { Console.WriteLine("Cisla se rovnaji!"); } // is numbers equals
          if (numberA.__IsLessThan(numberB)) { Console.WriteLine("Cislo A je mensi nez B!"); } // A is less than B
          if (numberA.__IsGreaterThan(numberB)) { Console.WriteLine("Cislo A je vetsi nez B!"); } // A is greater than B
        </code>
      </content>
    </section>

    <section address="Section2">
      <title>Usage of Matrix object and its methods.</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Object Matrix is in examples constructed with MatrixNumberInt implementation:
        </para>
        <code>
          Random rdm = new Random();
          Matrix&lt;MatrixNumberInt&gt; matrixA = new Matrix&lt;MatrixNumberInt&gt;(5, 5); // matrix with 5x5 elements

          Console.WriteLine(matrixA.Rows + " " + matrixA.Cols); // write numbers of rows and cols

          for (int i = 0; i &lt; matrixA.Rows; i++) // go through matrix rows
          {
              for (int j = 0; j &lt; matrixA.Cols; ++j) // got through matrix cols
              {
                  matrixA.WriteNumber(i, j, new MatrixNumberInt(rdm.Next())); // in element on indexes of i and j write random number
                  matrixA[i, j] = new MatrixNumberInt(rdm.Next()); // another way to do above

                  Console.Write(matrixA.GetNumber(i, j) + " "); // write number on given indexes on stdout
                  Console.Write(matrixA[i, j] + " "); // another way to do above
              }
                
              Console.WriteLine();
          }

          Matrix&lt;MatrixNumberInt&gt; matrixB = new Matrix&lt;MatrixNumberInt&gt;(matrixA); // create new matrix from matrix A

          int[,] input = new int[5, 5]; // array which will serve as source of matrix elements
          for (int i = 0; i &lt; input.GetLength(0); ++i)
          {
              for (int j = 0; j &lt; input.GetLength(1); j++)
              {
                  input[i, j] = rdm.Next();
              }
          }

          matrixA = new Matrix&lt;MatrixNumberInt&gt;(input);
              // instantiate new matrix with elements matching given array


          /* In A matrix change rows by switching elements */
          for (int i = 0; i &lt; matrixA.GetHalfOfRows(); ++i) // go only through half of the rows
          {
              for (int j = 0; j &lt; matrixA.Cols; j++)
              {
                  matrixA.SwapElements(i, j, matrixA.Rows - i - 1, matrixA.Cols - j - 1);
                      // switch elements on row (i + 1) with row (Rows - i)
              }
          }


          /* Defined operators on matrix */
          matrixA = matrixA + matrixB; // sum matrixes
          matrixA = matrixA - matrixB; // subtract matrixes
          matrixA = matrixA * matrixB; // multiply matrixes

          if (matrixA == matrixB) { Console.WriteLine("Matice se rovnaji!"); } // is matrixes equal
          if (matrixA != matrixB) { Console.WriteLine("Matice se nerovnaji!"); } // is matrixes not equal


          /* 
           * Parallel sum of two matrixes
           * Function GetRowsChunks() divide rows into equal pieces which can be processed in multiple threads
           */
          Parallel.ForEach(matrixA.GetRowsChunks(), (pair) =>
          {
              for (int i = pair.Item1; i &lt; pair.Item2; ++i)
              {
                  var vectorA = matrixA.GetRow(i); // get whole row with given index
                  var vectorB = matrixB.GetRow(i);

                  var resultAdd = Matrix&lt;MatrixNumberInt&gt;.DoVectorOperation(vectorA, vectorB,
                      (first, second) =>
                      {
                          return first.__Addition(second);
                      });
                      // functions DoVectorOperation() executes whole operation on all elements of given arrays
              }
          });
        </code>
      </content>
    </section>

    <section address="Section3">
      <title>Usage of all Matrix methods.</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Usage of functions which are not extension methods (ClassicOperations) and also extension methods on Matrix object.
        </para>
        <code>
          /* Create two matrixes which will be further used and fill them with random datas */
          Random rdm = new Random();
          Matrix&lt;MatrixNumber&gt; matrixA = new Matrix&lt;MatrixNumber&gt;(5, 5);
          Matrix&lt;MatrixNumber&gt; matrixB = new Matrix&lt;MatrixNumber&gt;(5, 5);
          Matrix&lt;MatrixNumber&gt; resultA;
          Matrix&lt;MatrixNumber&gt; resultB;

          for (int i = 0; i &lt; matrixA.Rows; i++)
          {
              for (int j = 0; j &lt; matrixA.Cols; j++)
              {
                  matrixA[i, j] = new MatrixNumber(rdm.Next());
                  matrixB[i, j] = new MatrixNumber(rdm.Next());
              }
          }


          /*
           * Firstly there is example of usage of static methods from ClassicOperations class which are not added as extension.
           * There are only few used methods from above stated static class.
           */

          resultA = ClassicOperations.Addition(matrixA, matrixB);
          resultB = ParallelClassicOperations.AdditionParallel(matrixA, matrixB);
          Debug.Assert(resultA == resultB);

          resultA = ClassicOperations.Subtraction(matrixA, matrixB);
          resultB = ParallelClassicOperations.SubtractionParallel(matrixA, matrixB);
          Debug.Assert(resultA == resultB);

          resultA = ClassicOperations.Multiplication(matrixA, matrixB);
          resultB = ParallelClassicOperations.MultiplicationParallel(matrixA, matrixB);
          Debug.Assert(resultA == resultB);


          /*
           * Example of extension methods usage.
           * There is sample of usage as static methods and also calling as extension method.
           */

          /* Altering operations */
          resultA = matrixA.Transposition(); // transposition of matrix
          resultB = matrixA.TranspositionParallel(); // parallel transposition
          Debug.Assert(resultA == resultB);
          resultA = AlteringOperationsExtensions.Transposition(matrixA); // transposition used as static method
          resultB = ParallelAlteringOperationsExtensions.TranspositionParallel(matrixA);
          Debug.Assert(resultA == resultB);

          resultA = matrixA.Gauss(); // gauss elimination
          resultB = matrixA.GaussParallel(); // parallel gauss elimination
          Debug.Assert(resultA == resultB);
          resultA = AlteringOperationsExtensions.Gauss(matrixA); // classical static usage
          resultB = ParallelAlteringOperationsExtensions.GaussParallel(matrixA);
          Debug.Assert(resultA == resultB);

          /* Computations */
          MatrixNumber resultNumberA, resultNumberB;
          resultNumberA = matrixA.Determinant();
          resultNumberB = matrixA.DeterminantParallel();
          Debug.Assert(resultNumberA == resultNumberB);
          resultNumberA = ComputationsExtensions.Determinant(matrixA);
          resultNumberB = ParallelComputationsExtensions.DeterminantParallel(matrixA);
          Debug.Assert(resultNumberA == resultNumberB);

          /* Decompositions */
          try
          {
              resultA = matrixA.CholeskyDecomposition();
              resultB = matrixA.CholeskyDecompositionParallel();
              Debug.Assert(resultA == resultB);
              resultA = DecompositionsExtensions.CholeskyDecomposition(matrixA);
              resultB = ParallelDecompositionsExtensions.CholeskyDecompositionParallel(matrixA);
              Debug.Assert(resultA == resultB);
          }
          catch { }

          /* Characteristics */
          try
          {
              EigenValues&lt;MatrixNumber&gt; eigenValues;
              resultA = matrixA.GetEigenVectors(out eigenValues);
              resultB = matrixA.GetEigenVectorsParallel(out eigenValues);
              Debug.Assert(resultA == resultB);
              resultA = CharacteristicsExtensions.GetEigenVectors(matrixA, out eigenValues);
              resultB = ParallelCharacteristicsExtensions.GetEigenVectorsParallel(matrixA, out eigenValues);
              Debug.Assert(resultA == resultB);
          }
          catch { }

          /* Properties */
          int rankA, rankB;
          rankA = matrixA.Rank();
          rankB = matrixB.RankParallel();
          Debug.Assert(rankA == rankB);
          rankA = PropertiesExtensions.Rank(matrixA);
          rankB = ParallelPropertiesExtensions.RankParallel(matrixA);
        </code>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerSampleDocument>
</topic>
